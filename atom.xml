<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yam</title>
  <icon>https://www.yam.gift/icon.png</icon>
  <subtitle>Feeling, Coding, Thinking</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.yam.gift/"/>
  <updated>2021-06-06T15:26:01.632Z</updated>
  <id>https://www.yam.gift/</id>
  
  <author>
    <name>Yam</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Rust str 转 String</title>
    <link href="https://www.yam.gift/2021/06/06/Rust/2021-06-06-str2String/"/>
    <id>https://www.yam.gift/2021/06/06/Rust/2021-06-06-str2String/</id>
    <published>2021-06-06T15:00:00.000Z</published>
    <updated>2021-06-06T15:26:01.632Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;在 Rust 中，&lt;code&gt;str&lt;/code&gt; 是引用，&lt;code&gt;String&lt;/code&gt; 是字符串对象，如下所示，&lt;a
        
      
    
    </summary>
    
    
      <category term="Coding" scheme="https://www.yam.gift/categories/Coding/"/>
    
    
      <category term="Rust" scheme="https://www.yam.gift/tags/Rust/"/>
    
      <category term="String" scheme="https://www.yam.gift/tags/String/"/>
    
      <category term="str" scheme="https://www.yam.gift/tags/str/"/>
    
  </entry>
  
  <entry>
    <title>Few-Shot NER and BERT Noisy Learning：ProtoBERT Paper Note</title>
    <link href="https://www.yam.gift/2021/06/06/Paper/2021-06-06-ProtoBERT/"/>
    <id>https://www.yam.gift/2021/06/06/Paper/2021-06-06-ProtoBERT/</id>
    <published>2021-06-06T15:00:00.000Z</published>
    <updated>2021-06-06T14:02:17.473Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Paper：&lt;a href=&quot;https://arxiv.org/abs/2105.00828&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;2105.00828 BERT memorisation and pitfalls in low-resource scenarios&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Code：无&lt;/p&gt;
&lt;p&gt;核心思想：结合原型网络，将少样本的标签表征为稠密向量。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Feeling" scheme="https://www.yam.gift/categories/Feeling/"/>
    
    
      <category term="NLP" scheme="https://www.yam.gift/tags/NLP/"/>
    
      <category term="BERT" scheme="https://www.yam.gift/tags/BERT/"/>
    
      <category term="NER" scheme="https://www.yam.gift/tags/NER/"/>
    
      <category term="ProtoBERT" scheme="https://www.yam.gift/tags/ProtoBERT/"/>
    
      <category term="few-shot" scheme="https://www.yam.gift/tags/few-shot/"/>
    
  </entry>
  
  <entry>
    <title>深度探索 Bert：BERTology Paper Note</title>
    <link href="https://www.yam.gift/2021/05/22/Paper/2021-05-22-BERTology/"/>
    <id>https://www.yam.gift/2021/05/22/Paper/2021-05-22-BERTology/</id>
    <published>2021-05-22T04:00:00.000Z</published>
    <updated>2021-06-06T13:59:30.553Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Paper：&lt;a href=&quot;https://arxiv.org/abs/2002.12327&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;[2002.12327] A Primer in BERTology: What we know about how BERT works&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;核心：全方位研究 BERT 到底学到了什么，怎么学的，效果如何，怎么改善。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Feeling" scheme="https://www.yam.gift/categories/Feeling/"/>
    
    
      <category term="NLP" scheme="https://www.yam.gift/tags/NLP/"/>
    
      <category term="BERT" scheme="https://www.yam.gift/tags/BERT/"/>
    
  </entry>
  
  <entry>
    <title>AI 工程师养成记（上）</title>
    <link href="https://www.yam.gift/2021/02/19/ExpSum/2021-02-19-AI-Engineer-Growing-I/"/>
    <id>https://www.yam.gift/2021/02/19/ExpSum/2021-02-19-AI-Engineer-Growing-I/</id>
    <published>2021-02-19T15:00:00.000Z</published>
    <updated>2021-02-21T12:59:03.789Z</updated>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%B7%A5%E4%BD%9C%E7%AF%87&quot;&gt;工作篇&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B&quot;&gt;工作流程&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E6%95%B0%E6%8D%AE%E5%87%86%E5%A4%87&quot;&gt;数据准备&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90&quot;&gt;数据分析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E6%A8%A1%E5%9E%8B%E9%83%A8%E7%BD%B2&quot;&gt;模型部署&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%B7%A5%E7%A8%8B%E5%BC%80%E5%8F%91&quot;&gt;工程开发&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E8%BF%90%E7%BB%B4%E7%9B%91%E6%8E%A7&quot;&gt;运维监控&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E6%9B%B4%E6%96%B0%E8%BF%AD%E4%BB%A3&quot;&gt;更新迭代&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%B7%A5%E4%BD%9C%E6%96%B9%E6%B3%95&quot;&gt;工作方法&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E8%87%AA%E5%8A%A8%E5%8C%96&quot;&gt;自动化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E6%89%B9%E9%87%8F%E5%8C%96&quot;&gt;批量化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E7%AE%80%E5%8D%95%E5%8C%96&quot;&gt;简单化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E8%BE%B9%E9%99%85%E6%94%B6%E7%9B%8A%E6%9C%80%E5%A4%A7%E5%8C%96&quot;&gt;边际收益最大化&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E6%9C%89%E6%95%88%E6%B2%9F%E9%80%9A&quot;&gt;有效沟通&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E6%98%8E%E7%A1%AE%E9%9C%80%E6%B1%82&quot;&gt;明确需求&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E7%BB%9D%E5%AF%B9%E5%9D%90%E6%A0%87&quot;&gt;绝对坐标&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E4%B8%8D%E5%90%8C%E5%B1%82%E7%BA%A7&quot;&gt;不同层级&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E8%AE%A8%E8%AE%BA%E9%97%AE%E9%A2%98&quot;&gt;讨论问题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%B9%B3%E7%A8%B3%E5%BF%83%E6%80%81&quot;&gt;平稳心态&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%88%9B%E4%B8%9A%E5%BF%83%E6%80%81&quot;&gt;创业心态&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E6%88%90%E9%95%BF%E5%BF%83%E6%80%81&quot;&gt;成长心态&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%BD%93%E4%B8%8B%E5%BF%83%E6%80%81&quot;&gt;当下心态&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一转眼转行已四年时间，这是转行以来第一次写关于个人对转行后感想心得的文章。一方面是因为所跨行业过大，行业内也有很多细分领域，要进一步明确方向需要不断试探。事实上，这几年基本能碰的都折腾过了，总算逐渐坚定；另一方面也是感觉一直没有从维度上得到提升，多个领域始终处于不得要领阶段，走了非常多的弯路。这次感受源于与一位资深算法工程师的沟通，又经几篇关于算法工程师工作日常和修养的好文，再加上这些年的积累，认真反思了几日，终于感觉到自己有了质的突破。虽然技能并没有多掌握，但确实比之前强大了不少（虽然依然很弱），有点像炼气期满筑基，奋斗之路刚刚开始，是有此文。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Thinking" scheme="https://www.yam.gift/categories/Thinking/"/>
    
    
      <category term="AI" scheme="https://www.yam.gift/tags/AI/"/>
    
      <category term="Skill" scheme="https://www.yam.gift/tags/Skill/"/>
    
  </entry>
  
  <entry>
    <title>SqueezeBERT 论文笔记</title>
    <link href="https://www.yam.gift/2021/01/17/Paper/2021-01-17-SqueezeBERT/"/>
    <id>https://www.yam.gift/2021/01/17/Paper/2021-01-17-SqueezeBERT/</id>
    <published>2021-01-17T15:00:00.000Z</published>
    <updated>2021-02-17T14:14:21.013Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Paper：&lt;a href=&quot;https://arxiv.org/abs/2006.11316&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;[2006.11316] SqueezeBERT: What can computer vision teach NLP about efficient neural networks?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Code：&lt;a href=&quot;https://github.com/huggingface/transformers/tree/master/src/transformers/models/squeezebert&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;transformers/src/transformers/models/squeezebert at master · huggingface/transformers&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;核心思想：把全连接全部替换为卷积的 BERT。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Feeling" scheme="https://www.yam.gift/categories/Feeling/"/>
    
    
      <category term="NLP" scheme="https://www.yam.gift/tags/NLP/"/>
    
      <category term="BERT" scheme="https://www.yam.gift/tags/BERT/"/>
    
      <category term="SqueezeBERT" scheme="https://www.yam.gift/tags/SqueezeBERT/"/>
    
  </entry>
  
  <entry>
    <title>从 Sentence-BERT 谈句子表征</title>
    <link href="https://www.yam.gift/2020/12/27/Paper/2020-12-27-Sentence-Bert/"/>
    <id>https://www.yam.gift/2020/12/27/Paper/2020-12-27-Sentence-Bert/</id>
    <published>2020-12-27T04:00:00.000Z</published>
    <updated>2020-12-27T03:36:48.291Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在之前那篇 &lt;a href=&quot;https://yam.gift/2020/12/12/2020-12-12-NLP-Representation-History-Future/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;NLP 表征的历史与未来 | Yam&lt;/a&gt; 里，我们几乎从头到尾都在提及句子表征，也提出过一个很重要的概念：“句子” 才是语义理解的最小单位。不过当时并没有太过深入细节，直到做到文本相似度任务时才发现早已经有人将其 BERT 化了。这就是本文要提到的一篇很重要但又很顺其自然的一篇论文——Sentence-BERT: Sentence Embeddings using Siamese BERT-Networks。其实说到相似度，大家多少都会想到大名鼎鼎的 Siamese Recurrent Networks，他们当时（2016 年）用的是 LSTM 对句子表征，那是因为那时候 LSTM 效果是最好的。Sentence-BERT 其实就是将 LSTM 替换为 BERT。 &lt;/p&gt;
    
    </summary>
    
    
      <category term="Feeling" scheme="https://www.yam.gift/categories/Feeling/"/>
    
    
      <category term="NLP" scheme="https://www.yam.gift/tags/NLP/"/>
    
      <category term="BERT" scheme="https://www.yam.gift/tags/BERT/"/>
    
      <category term="Sentence-BERT" scheme="https://www.yam.gift/tags/Sentence-BERT/"/>
    
      <category term="Siamese" scheme="https://www.yam.gift/tags/Siamese/"/>
    
      <category term="Sentence Similarity" scheme="https://www.yam.gift/tags/Sentence-Similarity/"/>
    
      <category term="Semantic Similarity" scheme="https://www.yam.gift/tags/Semantic-Similarity/"/>
    
      <category term="Cosine Similarity" scheme="https://www.yam.gift/tags/Cosine-Similarity/"/>
    
  </entry>
  
  <entry>
    <title>Bert-Flow 论文笔记</title>
    <link href="https://www.yam.gift/2020/12/13/Paper/2020-12-13-Bert-Flow/"/>
    <id>https://www.yam.gift/2020/12/13/Paper/2020-12-13-Bert-Flow/</id>
    <published>2020-12-13T15:00:00.000Z</published>
    <updated>2020-12-13T15:49:06.279Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Paper：&lt;a href=&quot;https://arxiv.org/abs/2011.05864&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;[2011.05864] On the Sentence Embeddings from Pre-trained Language Models&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Code：&lt;a href=&quot;https://github.com/bohanli/BERT-flow&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;bohanli/BERT-flow: TensorFlow implementation of On the Sentence Embeddings from Pre-trained Language Models (EMNLP 2020)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;核心思想：无监督方法将 Bert 产生的非平滑各向异性的句子语义空间分布转换为各向同性的高斯分布。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Feeling" scheme="https://www.yam.gift/categories/Feeling/"/>
    
    
      <category term="NLP" scheme="https://www.yam.gift/tags/NLP/"/>
    
      <category term="Bert" scheme="https://www.yam.gift/tags/Bert/"/>
    
      <category term="Bert-Flow" scheme="https://www.yam.gift/tags/Bert-Flow/"/>
    
      <category term="Glow" scheme="https://www.yam.gift/tags/Glow/"/>
    
      <category term="Normalizing Flow" scheme="https://www.yam.gift/tags/Normalizing-Flow/"/>
    
  </entry>
  
  <entry>
    <title>NLP 表征的历史与未来</title>
    <link href="https://www.yam.gift/2020/12/12/NLP/2020-12-12-NLP-Representation-History-Future/"/>
    <id>https://www.yam.gift/2020/12/12/NLP/2020-12-12-NLP-Representation-History-Future/</id>
    <published>2020-12-12T15:00:00.000Z</published>
    <updated>2020-12-12T15:46:05.259Z</updated>
    
    <summary type="html">
    
      &lt;div class=&quot;toc&quot;&gt;&lt;ul class=&quot;toc-item&quot;&gt;&lt;li&gt;&lt;span&gt;&lt;a href=&quot;#历史&quot; data-toc-modified-id=&quot;历史-1&quot;&gt;&lt;span class=&quot;toc-item-num&quot;&gt;1&amp;nbsp;&amp;nbsp;&lt;/span&gt;历史&lt;/a&gt;&lt;/span&gt;&lt;ul class=&quot;toc-item&quot;&gt;&lt;li&gt;&lt;span&gt;&lt;a href=&quot;#词向量&quot; data-toc-modified-id=&quot;词向量-1.1&quot;&gt;&lt;span class=&quot;toc-item-num&quot;&gt;1.1&amp;nbsp;&amp;nbsp;&lt;/span&gt;词向量&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;&lt;a href=&quot;#CNN&quot; data-toc-modified-id=&quot;CNN-1.2&quot;&gt;&lt;span class=&quot;toc-item-num&quot;&gt;1.2&amp;nbsp;&amp;nbsp;&lt;/span&gt;CNN&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;&lt;a href=&quot;#RNN&quot; data-toc-modified-id=&quot;RNN-1.3&quot;&gt;&lt;span class=&quot;toc-item-num&quot;&gt;1.3&amp;nbsp;&amp;nbsp;&lt;/span&gt;RNN&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;&lt;a href=&quot;#BERT-系列&quot; data-toc-modified-id=&quot;BERT-系列-1.4&quot;&gt;&lt;span class=&quot;toc-item-num&quot;&gt;1.4&amp;nbsp;&amp;nbsp;&lt;/span&gt;BERT 系列&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;&lt;a href=&quot;#未来&quot; data-toc-modified-id=&quot;未来-2&quot;&gt;&lt;span class=&quot;toc-item-num&quot;&gt;2&amp;nbsp;&amp;nbsp;&lt;/span&gt;未来&lt;/a&gt;&lt;/span&gt;&lt;ul class=&quot;toc-item&quot;&gt;&lt;li&gt;&lt;span&gt;&lt;a href=&quot;#认知角度&quot; data-toc-modified-id=&quot;认知角度-2.1&quot;&gt;&lt;span class=&quot;toc-item-num&quot;&gt;2.1&amp;nbsp;&amp;nbsp;&lt;/span&gt;认知角度&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;&lt;a href=&quot;#哲学角度&quot; data-toc-modified-id=&quot;哲学角度-2.2&quot;&gt;&lt;span class=&quot;toc-item-num&quot;&gt;2.2&amp;nbsp;&amp;nbsp;&lt;/span&gt;哲学角度&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;&lt;a href=&quot;#模式角度&quot; data-toc-modified-id=&quot;模式角度-2.3&quot;&gt;&lt;span class=&quot;toc-item-num&quot;&gt;2.3&amp;nbsp;&amp;nbsp;&lt;/span&gt;模式角度&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;&lt;a href=&quot;#方法角度&quot; data-toc-modified-id=&quot;方法角度-2.4&quot;&gt;&lt;span class=&quot;toc-item-num&quot;&gt;2.4&amp;nbsp;&amp;nbsp;&lt;/span&gt;方法角度&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;&lt;a href=&quot;#Reference&quot; data-toc-modified-id=&quot;Reference-3&quot;&gt;&lt;span class=&quot;toc-item-num&quot;&gt;3&amp;nbsp;&amp;nbsp;&lt;/span&gt;Reference&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

&lt;p&gt;从 Ngram 这样最简单的 SLM（Statistical Language Model）和 OneHot、LSA 以及其他 Co-Occurrence 的 VSM 模型，到 Word2Vec Glove 等考虑简单上下文的词向量模型，再到 CNN RNN BI-LSTM 等更多上下文和更复杂结构的模型，再到基于 Self-Attention 的 Bert 等考虑注意力的模型。我们能够感觉到每一次的变革一定是某种 ”模式“ 层面发生了变化。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Thinking" scheme="https://www.yam.gift/categories/Thinking/"/>
    
    
      <category term="AI" scheme="https://www.yam.gift/tags/AI/"/>
    
      <category term="NLP" scheme="https://www.yam.gift/tags/NLP/"/>
    
      <category term="Representation" scheme="https://www.yam.gift/tags/Representation/"/>
    
  </entry>
  
  <entry>
    <title>分类与 AI</title>
    <link href="https://www.yam.gift/2020/11/28/2020-11-28-Classification-and-AI/"/>
    <id>https://www.yam.gift/2020/11/28/2020-11-28-Classification-and-AI/</id>
    <published>2020-11-28T15:00:00.000Z</published>
    <updated>2020-11-28T12:11:06.079Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;分类作为机器学习或深度学习的基础任务之一，相信任何一位算法工程师都能说得头头是道。不过，能深入思考其背后涉及到的认知过程和机理的就凤毛麟角了。本文涉及到的思考部分从我 2017 年一开始接触人工智能与 NLP 就开始萌芽了，这源于我的切入点与正常人不同。由于个人经历关系，我一开始是从认知科学这个角度开始自己的工程师生涯的，刚开始看的论文也更加偏向于思考如何构建真正的人工智能。比如，Few-Shot 或 One-Shot Learning、因果推理、快速思考、学习如何学习，甚至开始思考语言学以及究竟什么是智能。很自然地也熟知了图灵、冯诺依曼、维特根斯坦。直至现在依然对这些理论相当沉迷，这也是我当初下定决心从事 AI 领域的原因。虽然目前从事 NLP 研发工作，但我对自己的定位一直都是 AI 工程师，AI 不应该被割裂，他从来都是个整体，作为成年人，我们自然是都要。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Thinking" scheme="https://www.yam.gift/categories/Thinking/"/>
    
    
      <category term="AI" scheme="https://www.yam.gift/tags/AI/"/>
    
      <category term="Classification" scheme="https://www.yam.gift/tags/Classification/"/>
    
  </entry>
  
  <entry>
    <title>GBTD + LR 论文笔记</title>
    <link href="https://www.yam.gift/2020/10/30/Paper/2020-10-30-GBTD-LR/"/>
    <id>https://www.yam.gift/2020/10/30/Paper/2020-10-30-GBTD-LR/</id>
    <published>2020-10-30T15:00:00.000Z</published>
    <updated>2020-10-30T16:45:15.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;2014 年，Facebook 在论文 &lt;a href=&quot;https://research.fb.com/wp-content/uploads/2016/11/practical-lessons-from-predicting-clicks-on-ads-at-facebook.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;practical-lessons-from-predicting-clicks-on-ads-at-facebook&lt;/a&gt; 中提出了一个将决策树算法和逻辑回归整合起来的模型，大致做法就是将输入的实数特征通过决策树转换为一个二进制的向量，该模型比其他方法在整体性能上提高超过 3 个百分点。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Coding" scheme="https://www.yam.gift/categories/Coding/"/>
    
    
      <category term="Recommendation" scheme="https://www.yam.gift/tags/Recommendation/"/>
    
      <category term="GBTD" scheme="https://www.yam.gift/tags/GBTD/"/>
    
      <category term="LR" scheme="https://www.yam.gift/tags/LR/"/>
    
  </entry>
  
  <entry>
    <title>Wide and Deep Learning for Recommender System 论文笔记</title>
    <link href="https://www.yam.gift/2020/10/27/Paper/2020-10-27-WideDeepLearning4RecSys/"/>
    <id>https://www.yam.gift/2020/10/27/Paper/2020-10-27-WideDeepLearning4RecSys/</id>
    <published>2020-10-27T15:00:00.000Z</published>
    <updated>2020-10-27T15:46:20.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;推荐系统可以看作是一个搜索排序系统，其中 input 是一组用户和上下文信息，output 是排好序的商品列表。推荐系统的一个挑战就是同时达到 memorization（记忆化）和 generalization（泛化）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;memorization：&lt;ul&gt;
&lt;li&gt;大致可定义为学习特征或商品的频繁共现关系并探索相关性&lt;/li&gt;
&lt;li&gt;与用户已经执行操作的商品直接相关&lt;/li&gt;
&lt;li&gt;可以通过使用稀疏特征上的交叉乘积变换（cross-product transformation）有效地实现，如 &lt;code&gt;AND(installed_app=netfix, impression_app=pandora)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;generalization：&lt;ul&gt;
&lt;li&gt;基于相关性的传递性探索之前很少出现或没出现过的新特征组合&lt;/li&gt;
&lt;li&gt;倾向于提高推荐结果的多样性&lt;/li&gt;
&lt;li&gt;可以通过使用不太精细的特征增加泛化，如 &lt;code&gt;AND(installed_category=video, impression_category=music)&lt;/code&gt;，一般需要人工进行特征处理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Coding" scheme="https://www.yam.gift/categories/Coding/"/>
    
    
      <category term="Recommendation" scheme="https://www.yam.gift/tags/Recommendation/"/>
    
      <category term="Wide" scheme="https://www.yam.gift/tags/Wide/"/>
    
      <category term="Deep" scheme="https://www.yam.gift/tags/Deep/"/>
    
  </entry>
  
  <entry>
    <title>矩阵分解</title>
    <link href="https://www.yam.gift/2020/10/24/RecSys/2020-10-24-MF/"/>
    <id>https://www.yam.gift/2020/10/24/RecSys/2020-10-24-MF/</id>
    <published>2020-10-24T15:00:00.000Z</published>
    <updated>2020-10-24T11:43:49.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍推荐系统中的矩阵分解技术。之前在&lt;a href=&quot;https://yam.gift/2020/10/22/RecSys/2020-10-22-CollaborativeFiltering/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;协同过滤 | Yam&lt;/a&gt;中分别提到过基于用户和商品的方法，它们分别基于相似用户和相似物品完成推荐。但是协同过滤有个很大的问题就是数据稀疏，以一个电商网站为例，可能大部分的商品都只有很少的用户购买，而热门商品又有很多人购买。这导致的结果就是难以找到相似的用户（基于用户的协同过滤）或头部效应（基于商品的协同过滤）。这一问题是协同过滤算法的天然缺陷，表现出来的其实正是 2-8 定律和马太效应，再往深了想，从客观角度看是因为信息不对称，主观角度看则是因为羊群效应。所以，很自然的想法就是将稀疏表征稠密化。稠密化表示也就意味着特征的多元化，直观来看自然是表征能力和泛化能力更强。矩阵分解正是这样的技术。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Coding" scheme="https://www.yam.gift/categories/Coding/"/>
    
    
      <category term="Recommendation" scheme="https://www.yam.gift/tags/Recommendation/"/>
    
      <category term="MF" scheme="https://www.yam.gift/tags/MF/"/>
    
      <category term="Matrix Factorization" scheme="https://www.yam.gift/tags/Matrix-Factorization/"/>
    
      <category term="SVD++" scheme="https://www.yam.gift/tags/SVD/"/>
    
      <category term="Funk MF" scheme="https://www.yam.gift/tags/Funk-MF/"/>
    
  </entry>
  
  <entry>
    <title>协同过滤</title>
    <link href="https://www.yam.gift/2020/10/22/RecSys/2020-10-22-CollaborativeFiltering/"/>
    <id>https://www.yam.gift/2020/10/22/RecSys/2020-10-22-CollaborativeFiltering/</id>
    <published>2020-10-22T15:00:00.000Z</published>
    <updated>2020-10-22T15:26:04.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;协同过滤是推荐领域的经典算法，它的思想非常朴素：和我们兴趣相似的人喜好也类似。所以，自然而然，只要找到和我们兴趣相似的人，将他们喜好的商品（又不在我们喜好商品的列表中）推送给我们就完成了推荐任务。本文主要介绍该算法&lt;/p&gt;
    
    </summary>
    
    
      <category term="Coding" scheme="https://www.yam.gift/categories/Coding/"/>
    
    
      <category term="Recommendation" scheme="https://www.yam.gift/tags/Recommendation/"/>
    
      <category term="Cosine" scheme="https://www.yam.gift/tags/Cosine/"/>
    
      <category term="Collaborative Filtering" scheme="https://www.yam.gift/tags/Collaborative-Filtering/"/>
    
      <category term="UserCF" scheme="https://www.yam.gift/tags/UserCF/"/>
    
      <category term="ItemCF" scheme="https://www.yam.gift/tags/ItemCF/"/>
    
      <category term="Similarity" scheme="https://www.yam.gift/tags/Similarity/"/>
    
      <category term="Jaccard" scheme="https://www.yam.gift/tags/Jaccard/"/>
    
      <category term="Pearson" scheme="https://www.yam.gift/tags/Pearson/"/>
    
      <category term="Minkowski" scheme="https://www.yam.gift/tags/Minkowski/"/>
    
  </entry>
  
  <entry>
    <title>推荐系统概述</title>
    <link href="https://www.yam.gift/2020/10/19/RecSys/2020-10-19-RecIntroduction/"/>
    <id>https://www.yam.gift/2020/10/19/RecSys/2020-10-19-RecIntroduction/</id>
    <published>2020-10-19T15:00:00.000Z</published>
    <updated>2020-10-19T14:45:43.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;本文主要从整体角度介绍推荐系统，主要内容包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;推荐系统简介&lt;/li&gt;
&lt;li&gt;推荐系统架构&lt;/li&gt;
&lt;li&gt;如何评价一个推荐系统&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Feeling" scheme="https://www.yam.gift/categories/Feeling/"/>
    
    
      <category term="Embedding" scheme="https://www.yam.gift/tags/Embedding/"/>
    
      <category term="Recommendation" scheme="https://www.yam.gift/tags/Recommendation/"/>
    
      <category term="Metric" scheme="https://www.yam.gift/tags/Metric/"/>
    
  </entry>
  
  <entry>
    <title>Funnel Transformer 论文笔记</title>
    <link href="https://www.yam.gift/2020/10/13/Paper/2020-10-13-FunnelTransformer/"/>
    <id>https://www.yam.gift/2020/10/13/Paper/2020-10-13-FunnelTransformer/</id>
    <published>2020-10-13T15:00:00.000Z</published>
    <updated>2020-10-13T08:12:12.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Paper：&lt;a href=&quot;https://arxiv.org/abs/2006.03236&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;[2006.03236] Funnel-Transformer: Filtering out Sequential Redundancy for Efficient Language Processing&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Code：&lt;a href=&quot;https://github.com/laiguokun/Funnel-Transformer/tree/master/tensorflow&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Funnel-Transformer/tensorflow at master · laiguokun/Funnel-Transformer&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;核心思想：Block 卷积的 Transformer。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Feeling" scheme="https://www.yam.gift/categories/Feeling/"/>
    
    
      <category term="NLP" scheme="https://www.yam.gift/tags/NLP/"/>
    
      <category term="Transformer" scheme="https://www.yam.gift/tags/Transformer/"/>
    
      <category term="Self-Attention" scheme="https://www.yam.gift/tags/Self-Attention/"/>
    
      <category term="Funnel Transformer" scheme="https://www.yam.gift/tags/Funnel-Transformer/"/>
    
      <category term="Pooling" scheme="https://www.yam.gift/tags/Pooling/"/>
    
  </entry>
  
  <entry>
    <title>模型融合</title>
    <link href="https://www.yam.gift/2020/09/26/ML/2020-09-26-ModelFusing/"/>
    <id>https://www.yam.gift/2020/09/26/ML/2020-09-26-ModelFusing/</id>
    <published>2020-09-26T15:00:00.000Z</published>
    <updated>2020-09-26T15:36:40.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;模型融合思想很简单，就是将多种不同类型的模型结合起来共同预测结果——”三个臭皮匠，顶个诸葛亮“。模型融合主要有以下方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;平均：简单平均和加权平均&lt;/li&gt;
&lt;li&gt;投票：简单投票和加权投票&lt;/li&gt;
&lt;li&gt;stacking：多层模型，利用预测结果再拟合预测&lt;/li&gt;
&lt;li&gt;blending：选取部分数据预测，得到的值作为新特征&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Coding" scheme="https://www.yam.gift/categories/Coding/"/>
    
    
      <category term="Data Science" scheme="https://www.yam.gift/tags/Data-Science/"/>
    
      <category term="Machine Learning" scheme="https://www.yam.gift/tags/Machine-Learning/"/>
    
      <category term="Voting" scheme="https://www.yam.gift/tags/Voting/"/>
    
      <category term="Stacking" scheme="https://www.yam.gift/tags/Stacking/"/>
    
      <category term="Blending" scheme="https://www.yam.gift/tags/Blending/"/>
    
      <category term="StratifiedKFold" scheme="https://www.yam.gift/tags/StratifiedKFold/"/>
    
  </entry>
  
  <entry>
    <title>建模调参</title>
    <link href="https://www.yam.gift/2020/09/24/ML/2020-09-24-ModelParameters/"/>
    <id>https://www.yam.gift/2020/09/24/ML/2020-09-24-ModelParameters/</id>
    <published>2020-09-24T15:00:00.000Z</published>
    <updated>2020-09-25T14:05:25.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;通过前面的 &lt;a href=&quot;https://yam.gift/2020/09/18/ML/2020-09-18-EDA/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;EDA&lt;/a&gt; 和&lt;a href=&quot;https://yam.gift/2020/09/21/ML/2020-09-21-FeatureEngineering/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;特征工程&lt;/a&gt;探索，想必应该已经对数据有了比较深入的了解，那么接下来就是利用之前所学来建模看看实战效果了。因为之前是系统性学习，所以并不一定所有的技术都要用到，而且建模应该是个结合对数据已有了解的基础上进行重新思考的过程。&lt;/p&gt;
&lt;p&gt;本文分为以下几个部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;重新思考梳理 Pipeline 流程&lt;/li&gt;
&lt;li&gt;建模&lt;/li&gt;
&lt;li&gt;调参&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Coding" scheme="https://www.yam.gift/categories/Coding/"/>
    
    
      <category term="Data Science" scheme="https://www.yam.gift/tags/Data-Science/"/>
    
      <category term="Machine Learning" scheme="https://www.yam.gift/tags/Machine-Learning/"/>
    
      <category term="Tuning" scheme="https://www.yam.gift/tags/Tuning/"/>
    
      <category term="Model Evaluation" scheme="https://www.yam.gift/tags/Model-Evaluation/"/>
    
      <category term="Data Preprocess" scheme="https://www.yam.gift/tags/Data-Preprocess/"/>
    
  </entry>
  
  <entry>
    <title>特征工程</title>
    <link href="https://www.yam.gift/2020/09/21/ML/2020-09-21-FeatureEngineering/"/>
    <id>https://www.yam.gift/2020/09/21/ML/2020-09-21-FeatureEngineering/</id>
    <published>2020-09-21T15:00:00.000Z</published>
    <updated>2020-09-21T15:44:29.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;常听一句话说 “你还能玩儿出花来”，我觉得特征工程就是这么个把那些看上去普普通通的 “数据” 玩儿出花的过程。如果用 DIKW 模型（Data Information Knowledge Wisdom）来理解，Data 显然就是原始的一个个数据值，Information 就是对数据进行分析、处理后得到的具有一定意义的东西。&lt;/p&gt;
&lt;p&gt;严格的定义如下：特征工程是对原始数据进行一系列工程处理，将其提炼为特征根，作为模型的输入。它旨在去除原数据中的杂质和冗余，使得模型与预测值之间能够以此建立联系。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Coding" scheme="https://www.yam.gift/categories/Coding/"/>
    
    
      <category term="Data Science" scheme="https://www.yam.gift/tags/Data-Science/"/>
    
      <category term="Machine Learning" scheme="https://www.yam.gift/tags/Machine-Learning/"/>
    
      <category term="Feature Engineering" scheme="https://www.yam.gift/tags/Feature-Engineering/"/>
    
      <category term="binning" scheme="https://www.yam.gift/tags/binning/"/>
    
      <category term="LOF" scheme="https://www.yam.gift/tags/LOF/"/>
    
      <category term="Isolation Forest" scheme="https://www.yam.gift/tags/Isolation-Forest/"/>
    
      <category term="IQR" scheme="https://www.yam.gift/tags/IQR/"/>
    
      <category term="RFE" scheme="https://www.yam.gift/tags/RFE/"/>
    
      <category term="Chi2" scheme="https://www.yam.gift/tags/Chi2/"/>
    
      <category term="Z-Score" scheme="https://www.yam.gift/tags/Z-Score/"/>
    
  </entry>
  
  <entry>
    <title>EDA</title>
    <link href="https://www.yam.gift/2020/09/18/ML/2020-09-18-EDA/"/>
    <id>https://www.yam.gift/2020/09/18/ML/2020-09-18-EDA/</id>
    <published>2020-09-18T15:00:00.000Z</published>
    <updated>2020-09-19T23:31:48.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;探索性数据分析 EDA（Exploratory Data Analysis）是数据分析和挖掘的第一步，主要是对数据集进行了解，包括基本情况、特征情况、特征间关系等等，为进一步的分析和挖掘提供信息。&lt;/p&gt;
&lt;p&gt;一个完整的 EDA 过程一般大致包括四步：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;问题定义：问题定义涉及的主要任务是定义分析的主要目标，定义主要的可交付成果，概述主要角色和职责，获取数据的当前状态，定义时间表以及执行成本/收益分析。&lt;/li&gt;
&lt;li&gt;数据准备：包括数据源定义、数据 schema 定义、数据特征了解、数据清理、数据转换、数据分割等。&lt;/li&gt;
&lt;li&gt;数据分析：这是处理描述性统计信息和数据分析的最关键步骤之一。 主要任务包括汇总数据，发现数据之间隐藏的关联和关系，开发预测模型，评估模型以及计算精度。&lt;/li&gt;
&lt;li&gt;结果展示：以图表、摘要、地图和图表的形式将数据集呈现给目标受众。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Coding" scheme="https://www.yam.gift/categories/Coding/"/>
    
    
      <category term="Data Science" scheme="https://www.yam.gift/tags/Data-Science/"/>
    
      <category term="EDA" scheme="https://www.yam.gift/tags/EDA/"/>
    
  </entry>
  
  <entry>
    <title>Metrics</title>
    <link href="https://www.yam.gift/2020/09/15/ML/2020-09-15-Metrics/"/>
    <id>https://www.yam.gift/2020/09/15/ML/2020-09-15-Metrics/</id>
    <published>2020-09-15T12:00:00.000Z</published>
    <updated>2020-10-20T05:35:29.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;机器学习的数据集一般被划分为训练集和测试集，训练集用于训练模型，测试集则用于评估模型。针对不同的机器学习问题（分类、排序、回归、序列预测等），评估指标的选择也有所不同。本文主要介绍机器学习中常用的模型评估指标。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Coding" scheme="https://www.yam.gift/categories/Coding/"/>
    
    
      <category term="AI" scheme="https://www.yam.gift/tags/AI/"/>
    
      <category term="Machine Learning" scheme="https://www.yam.gift/tags/Machine-Learning/"/>
    
      <category term="Accuracy" scheme="https://www.yam.gift/tags/Accuracy/"/>
    
      <category term="Precision" scheme="https://www.yam.gift/tags/Precision/"/>
    
      <category term="Recall" scheme="https://www.yam.gift/tags/Recall/"/>
    
      <category term="RMSE" scheme="https://www.yam.gift/tags/RMSE/"/>
    
      <category term="ROC" scheme="https://www.yam.gift/tags/ROC/"/>
    
      <category term="AUC" scheme="https://www.yam.gift/tags/AUC/"/>
    
      <category term="P-R" scheme="https://www.yam.gift/tags/P-R/"/>
    
      <category term="KS" scheme="https://www.yam.gift/tags/KS/"/>
    
      <category term="WOE" scheme="https://www.yam.gift/tags/WOE/"/>
    
  </entry>
  
</feed>
